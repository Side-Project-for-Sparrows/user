plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.sparrows'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	implementation 'org.springframework.boot:spring-boot-starter-batch'
	testImplementation 'org.springframework.batch:spring-batch-test'

	//카프카
	implementation 'org.springframework.kafka:spring-kafka'

	//몽고디비, 레디스
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	//엘라스틱서치
	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
	implementation 'co.elastic.clients:elasticsearch-java'
	implementation 'org.apache.httpcomponents.client5:httpclient5'

	implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.3'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.18.3'
	implementation 'com.fasterxml.jackson.module:jackson-module-scala_2.13:2.18.0'

	//디비
	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.1.0'
	implementation 'com.querydsl:querydsl-core:5.1.0'
	annotationProcessor("com.querydsl:querydsl-apt:5.1.0:jakarta")
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
	implementation 'com.vladmihalcea:hibernate-types-60:2.21.1'

	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	//FeignClient
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	//로그 json 포맷 출력
	implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

	//테스트
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:4.20.0' //인메모리 몽고디비
	testImplementation "org.testcontainers:junit-jupiter"
	testImplementation "org.testcontainers:postgresql"
	testImplementation 'org.testcontainers:testcontainers:1.19.3'
	testImplementation 'org.testcontainers:junit-jupiter:1.19.3'
	testImplementation 'org.testcontainers:elasticsearch:1.19.3'}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
	options.annotationProcessorGeneratedSourcesDirectory = file("$buildDir/generated/sources/annotationProcessor/java/main")
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', "$buildDir/generated/sources/annotationProcessor/java/main"]
		}
	}
}

clean {
	delete file('src/main/generated') // QClass 삭제 방지
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:2024.0.1"
	}
}